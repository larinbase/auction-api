/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.schema.tables;


import com.technokratos.model.jooq.schema.Keys;
import com.technokratos.model.jooq.schema.Public;
import com.technokratos.model.jooq.schema.tables.records.LotRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Лот
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Lot extends TableImpl<LotRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.lot</code>
     */
    public static final Lot LOT_ENTITY = new Lot();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LotRecord> getRecordType() {
        return LotRecord.class;
    }

    /**
     * The column <code>public.lot.id</code>.
     */
    public final TableField<LotRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.lot.name</code>.
     */
    public final TableField<LotRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.lot.description</code>.
     */
    public final TableField<LotRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(1000).nullable(false), this, "");

    /**
     * The column <code>public.lot.artikul</code>.
     */
    public final TableField<LotRecord, String> ARTIKUL = createField(DSL.name("artikul"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.lot.status</code>.
     */
    public final TableField<LotRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(10).nullable(false).defaultValue(DSL.field("'open'::character varying", SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>public.lot.auction_id</code>.
     */
    public final TableField<LotRecord, UUID> AUCTION_ID = createField(DSL.name("auction_id"), SQLDataType.UUID.nullable(false), this, "");

    private Lot(Name alias, Table<LotRecord> aliased) {
        this(alias, aliased, null);
    }

    private Lot(Name alias, Table<LotRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Лот"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.lot</code> table reference
     */
    public Lot(String alias) {
        this(DSL.name(alias), LOT_ENTITY);
    }

    /**
     * Create an aliased <code>public.lot</code> table reference
     */
    public Lot(Name alias) {
        this(alias, LOT_ENTITY);
    }

    /**
     * Create a <code>public.lot</code> table reference
     */
    public Lot() {
        this(DSL.name("lot"), null);
    }

    public <O extends Record> Lot(Table<O> child, ForeignKey<O, LotRecord> key) {
        super(child, key, LOT_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<LotRecord> getPrimaryKey() {
        return Keys.LOT_PK;
    }

    @Override
    public List<UniqueKey<LotRecord>> getUniqueKeys() {
        return Arrays.asList(Keys.LOT_ARTIKUL_KEY);
    }

    @Override
    public Lot as(String alias) {
        return new Lot(DSL.name(alias), this);
    }

    @Override
    public Lot as(Name alias) {
        return new Lot(alias, this);
    }

    @Override
    public Lot as(Table<?> alias) {
        return new Lot(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Lot rename(String name) {
        return new Lot(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lot rename(Name name) {
        return new Lot(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Lot rename(Table<?> name) {
        return new Lot(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, String, String, String, String, UUID> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super UUID, ? super String, ? super String, ? super String, ? super String, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
