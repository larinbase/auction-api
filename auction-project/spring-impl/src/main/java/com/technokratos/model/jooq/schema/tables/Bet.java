/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.schema.tables;


import com.technokratos.model.jooq.schema.Keys;
import com.technokratos.model.jooq.schema.Public;
import com.technokratos.model.jooq.schema.tables.records.BetRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.UUID;
import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * Ставка
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Bet extends TableImpl<BetRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.bet</code>
     */
    public static final Bet BET_ENTITY = new Bet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BetRecord> getRecordType() {
        return BetRecord.class;
    }

    /**
     * The column <code>public.bet.id</code>.
     */
    public final TableField<BetRecord, UUID> ID = createField(DSL.name("id"), SQLDataType.UUID.nullable(false).defaultValue(DSL.field("uuid_generate_v4()", SQLDataType.UUID)), this, "");

    /**
     * The column <code>public.bet.amount</code>.
     */
    public final TableField<BetRecord, BigDecimal> AMOUNT = createField(DSL.name("amount"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.bet.date_time</code>.
     */
    public final TableField<BetRecord, LocalDate> DATE_TIME = createField(DSL.name("date_time"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.bet.lot_id</code>.
     */
    public final TableField<BetRecord, UUID> LOT_ID = createField(DSL.name("lot_id"), SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.bet.account_id</code>.
     */
    public final TableField<BetRecord, UUID> ACCOUNT_ID = createField(DSL.name("account_id"), SQLDataType.UUID.nullable(false), this, "");

    private Bet(Name alias, Table<BetRecord> aliased) {
        this(alias, aliased, null);
    }

    private Bet(Name alias, Table<BetRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("Ставка"), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.bet</code> table reference
     */
    public Bet(String alias) {
        this(DSL.name(alias), BET_ENTITY);
    }

    /**
     * Create an aliased <code>public.bet</code> table reference
     */
    public Bet(Name alias) {
        this(alias, BET_ENTITY);
    }

    /**
     * Create a <code>public.bet</code> table reference
     */
    public Bet() {
        this(DSL.name("bet"), null);
    }

    public <O extends Record> Bet(Table<O> child, ForeignKey<O, BetRecord> key) {
        super(child, key, BET_ENTITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<BetRecord> getPrimaryKey() {
        return Keys.BET_PK;
    }

    @Override
    public Bet as(String alias) {
        return new Bet(DSL.name(alias), this);
    }

    @Override
    public Bet as(Name alias) {
        return new Bet(alias, this);
    }

    @Override
    public Bet as(Table<?> alias) {
        return new Bet(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Bet rename(String name) {
        return new Bet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bet rename(Name name) {
        return new Bet(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Bet rename(Table<?> name) {
        return new Bet(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<UUID, BigDecimal, LocalDate, UUID, UUID> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super UUID, ? super BigDecimal, ? super LocalDate, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super UUID, ? super BigDecimal, ? super LocalDate, ? super UUID, ? super UUID, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
