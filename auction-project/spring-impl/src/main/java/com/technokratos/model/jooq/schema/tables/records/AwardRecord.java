/*
 * This file is generated by jOOQ.
 */
package com.technokratos.model.jooq.schema.tables.records;


import com.technokratos.model.jooq.schema.tables.Award;
import com.technokratos.model.jooq.schema.tables.pojos.AwardEntity;

import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AwardRecord extends UpdatableRecordImpl<AwardRecord> implements Record3<UUID, UUID, UUID> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.award.id</code>.
     */
    public void setId(UUID value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.award.id</code>.
     */
    public UUID getId() {
        return (UUID) get(0);
    }

    /**
     * Setter for <code>public.award.lot_id</code>.
     */
    public void setLotId(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.award.lot_id</code>.
     */
    public UUID getLotId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.award.account_id</code>.
     */
    public void setAccountId(UUID value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.award.account_id</code>.
     */
    public UUID getAccountId() {
        return (UUID) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<UUID> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<UUID, UUID, UUID> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<UUID, UUID, UUID> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<UUID> field1() {
        return Award.AWARD_ENTITY.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Award.AWARD_ENTITY.LOT_ID;
    }

    @Override
    public Field<UUID> field3() {
        return Award.AWARD_ENTITY.ACCOUNT_ID;
    }

    @Override
    public UUID component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getLotId();
    }

    @Override
    public UUID component3() {
        return getAccountId();
    }

    @Override
    public UUID value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getLotId();
    }

    @Override
    public UUID value3() {
        return getAccountId();
    }

    @Override
    public AwardRecord value1(UUID value) {
        setId(value);
        return this;
    }

    @Override
    public AwardRecord value2(UUID value) {
        setLotId(value);
        return this;
    }

    @Override
    public AwardRecord value3(UUID value) {
        setAccountId(value);
        return this;
    }

    @Override
    public AwardRecord values(UUID value1, UUID value2, UUID value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AwardRecord
     */
    public AwardRecord() {
        super(Award.AWARD_ENTITY);
    }

    /**
     * Create a detached, initialised AwardRecord
     */
    public AwardRecord(UUID id, UUID lotId, UUID accountId) {
        super(Award.AWARD_ENTITY);

        setId(id);
        setLotId(lotId);
        setAccountId(accountId);
    }

    /**
     * Create a detached, initialised AwardRecord
     */
    public AwardRecord(AwardEntity value) {
        super(Award.AWARD_ENTITY);

        if (value != null) {
            setId(value.getId());
            setLotId(value.getLotId());
            setAccountId(value.getAccountId());
        }
    }
}
